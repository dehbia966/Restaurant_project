-- Vue =============================================================
DELIMITER $$

CREATE VIEW Comptabilite as
SELECT FS.PER_DATE_DEBUT as DATE, ((SELECT HT.NOMBRE_HEURE_TRAVAILLER from HEURE_TRAVAIL HT where HT.NUM_FICHE_SALAIRE = FS.NUM_FICHE_SALAIRE) * FS.TARIF_HORAIRE - FS.TAXE + (FS.PRIME- FS.DEDUCTION_PRIME))*-1  as MONTANT, 'SALAIRE' as TYPE from FICHE_SALAIRE FS
UNION
SELECT AD.DATE_DEPENSE as DATE, AD.MONTANT_DEPENSE*-1 as MONTANT, 'AUTRE DEPENSE' as TYPE from AUTRE_DEPENSE AD
UNION
SELECT FT.DATE as DATE, FT.MONTANT*-1 as MONTANT, 'FACTURE' as TYPE from FACTURE FT
UNION
SELECT RP.DATE AS DATE, (SELECT SUM(AT.PRIX) FROM ARTICLE AT INNER JOIN peut_contenir_ PC ON AT.NOM = PC.NOM WHERE PC.ID_RECU = RP.ID_RECU) AS MONTANT, 'RECU' AS TYPE FROM RECU_PAIMENT RP;

$$

DELIMITER ;

DELIMITER $$

CREATE VIEW STOCK_DE_PRODUIT AS
SELECT
    P.NOM AS NOM,
    P.ID_PRODUIT AS IDENTIFIANT,
    P.QTE AS QUANTITE,
    (
        SELECT SUM(BC.QTE)
        FROM BON_COMMANDE BC
        WHERE BC.ID_COMMANDE IN (
            SELECT CC.ID_COMMANDE
            FROM concerne CC
            WHERE CC.ID_PRODUIT = P.ID_PRODUIT
        )
    ) - (
        SELECT SUM(BL.QTE)
        FROM BON_LIVRAISON BL
        WHERE BL.ID_BON_LIV IN (
            SELECT CC.ID_BON_LIV
            FROM concerne CC
            WHERE CC.ID_PRODUIT = P.ID_PRODUIT
        )
    ) AS QUANTITE_EN_APPROCHE,
    P.PRIX AS PRIX,
    P.ID_STOCK AS EMPLACEMENT
FROM
    PRODUIT P;
$$

DELIMITER ;

DELIMITER $$

CREATE VIEW PERSONNEL_ACTIF AS
SELECT
    P.ID_TIERS AS IDENTIFIANT,
    P.NOM AS nom,
    P.EMAIL AS email,
    CASE
        WHEN PE.CUISINE = 1 THEN 'CUISINE'
        WHEN PE.BAR = 1 THEN 'BAR'
        WHEN PE.SALLE = 1 THEN 'SALLE'
        WHEN PE.RESPONSABLE = 1 THEN 'RESPONSABLE'
        ELSE NULL
    END AS JOB
FROM
    PERSONNE P
JOIN
    PERSONNEL PE ON P.ID_TIERS = PE.ID_TIERS
JOIN
    CONTRAT C ON PE.ID_TIERS = C.ID_TIERS;

$$

DELIMITER ;

-- Triggers =============================================================

DELIMITER $$

CREATE TRIGGER FicheSalaire_dans_dateContrat
BEFORE INSERT ON FICHE_SALAIRE FOR EACH ROW
BEGIN
     DECLARE rowcount INT;
     SELECT COUNT(*) INTO rowcount FROM FICHE_SALAIRE, CONTRAT
     WHERE FICHE_SALAIRE.ID_TIERS = CONTRAT.ID_TIERS
     AND (FICHE_SALAIRE.PER_DATE_DEBUT BETWEEN CONTRAT.DATE_DEBUT AND CONTRAT.DATE_FIN
          AND FICHE_SALAIRE.PER_DATE_FIN BETWEEN CONTRAT.DATE_DEBUT AND CONTRAT.DATE_FIN);
     IF rowcount > 0 THEN
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Date non valide car n''est pas dans le contrat du travailleur';
     END IF;
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER Conge_dans_dateContrat
BEFORE INSERT ON CONGE FOR EACH ROW
BEGIN
     DECLARE rowcount INT;
     SELECT COUNT(*) INTO rowcount FROM CONGE, CONTRAT 
     WHERE CONGE.ID_TIERS = CONTRAT.ID_TIERS
     AND (CONGE.DATE_DEBUT BETWEEN CONTRAT.DATE_DEBUT AND CONTRAT.DATE_FIN
          AND DATE_ADD(CONGE.DATE_DEBUT, INTERVAL CONGE.NOMBRE_JOUR DAY) BETWEEN CONTRAT.DATE_DEBUT AND CONTRAT.DATE_FIN);
     IF rowcount > 0 THEN
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Date non valide car n''est pas dans le contrat du travailleur';
     END IF;
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER FichePaye_Superposee
BEFORE INSERT ON FICHE_SALAIRE FOR EACH ROW
BEGIN
     DECLARE rowcount INT;
     SELECT COUNT(*) INTO rowcount FROM FICHE_SALAIRE 
     WHERE ID_TIERS = NEW.ID_TIERS
     AND (NEW.PER_DATE_DEBUT BETWEEN PER_DATE_DEBUT AND PER_DATE_FIN
          AND NEW.PER_DATE_FIN BETWEEN PER_DATE_DEBUT AND PER_DATE_FIN);
     IF rowcount > 0 THEN
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Date non valide car chevauche une autre date';
     END IF;
END$$

DELIMITER ;

DELIMITER $$
CREATE TRIGGER Contrat_Superposee
BEFORE INSERT ON CONTRAT FOR EACH ROW
BEGIN
     DECLARE rowcount INT;
     SELECT COUNT(*) INTO rowcount FROM CONTRAT 
     WHERE ID_TIERS = NEW.ID_TIERS
     AND (NEW.DATE_DEBUT BETWEEN DATE_DEBUT AND DATE_FIN
          AND NEW.DATE_FIN BETWEEN DATE_DEBUT AND DATE_FIN);
     IF rowcount > 0 THEN
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Date non valide car chevauche une autre date';
     END IF;
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER CongeAnnuel_CDD_CDI
BEFORE INSERT ON CONGE FOR EACH ROW
BEGIN
     DECLARE rowcount INT;
     SET rowcount = 0;
     SELECT COUNT(*) INTO rowcount FROM CONGE, CONTRAT, FICHE_SALAIRE
     WHERE CONGE.ID_TIERS = CONTRAT.ID_TIERS
     AND CONGE.TYPE = 'annuel'
     AND (CONTRAT.TYPE = 'CDI' OR CONTRAT.TYPE = 'CDD')
     AND CONGE.DATE_DEBUT BETWEEN FICHE_SALAIRE.PER_DATE_DEBUT AND FICHE_SALAIRE.PER_DATE_FIN
     AND DATE_ADD(CONGE.DATE_DEBUT, INTERVAL CONGE.NOMBRE_JOUR DAY) BETWEEN FICHE_SALAIRE.PER_DATE_DEBUT AND FICHE_SALAIRE.PER_DATE_FIN;
     IF rowcount > 0 THEN
          SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Congee non valide car pas compris entre debut et fin de la fiche salaire';
     END IF;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER CHECK_HEURE_TRAVAIL_CONGE
BEFORE INSERT ON HEURE_TRAVAIL
FOR EACH ROW
BEGIN
    DECLARE ID_TRAVAILLEUR INT DEFAULT 0;
    DECLARE DATE_FIN DATE DEFAULT '0001-01-01';
    
    SET ID_TRAVAILLEUR = (SELECT ID_TIERS FROM CONGE WHERE ID_TIERS = NEW.ID_TIERS);
    SET DATE_FIN = DATE_ADD((SELECT DATE_DEBUT FROM CONGE WHERE ID_TIERS = ID_TRAVAILLEUR), INTERVAL (SELECT NOMBRE_JOUR FROM CONGE WHERE ID_TIERS = ID_TRAVAILLEUR) DAY);
    
    IF (SELECT DATE_DEBUT FROM CONGE WHERE ID_TIERS = ID_TRAVAILLEUR) <= (SELECT DATE FROM HEURE_TRAVAIL WHERE ID_TIERS = ID_TRAVAILLEUR) AND (SELECT DATE FROM HEURE_TRAVAIL WHERE ID_TIERS = ID_TRAVAILLEUR) <= DATE_FIN THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Un membre du personnel ne peut pas faire des heures de travail durant ses congés';
    END IF;
END $$


DELIMITER ;

DELIMITER $$

create trigger CHECK_DATE_PAYEMENT_DATE_RESERVATION
before insert on RECU_PAIMENT for each row
BEGIN
    declare ID_PAYEMENT int default 0;
    set ID_PAYEMENT = (select ID_RESERVATION from peut_contenir_ where ID_RECU = new.ID_RECU);
    if (select re.DATE from RECU_PAIMENT re where re.ID_RECU = new.ID_RECU) < (select res.DATE from RESERVATION res where res.ID_RESERVATION = ID_PAYEMENT)
    then
        signal sqlstate'45000'set message_text ='Un recu de payement ne peut pas être lié à une réservation future';
    end if;
end $$
DELIMITER ;

DELIMITER $$ 

create trigger CHECK_DATE_FACTURE_BON_LIVRAISON
before insert on FACTURE for each row
BEGIN
 if (select bl.DATE from BON_LIVRAISON bl where bl.ID_FACTURE=new.ID_FACTURE)>new.DATE
 then
 signal sqlstate'45000'set message_text ='Une facture ne peut pas être antérieur au bon de livraison correspondant';
 end if;
end $$

DELIMITER ;

DELIMITER $$

create trigger CHECK_DATE_LIVRAISON_COMMANDE
before insert on BON_LIVRAISON for each row
BEGIN
 if(select com.DATE from BON_COMMANDE where com.ID_COMMANDE = new.ID_COMMANDE)>new.DATE
 then
 signal sqlstate'45000'set message_text ='un bon de livraison ne peut pas être antérieur à la commande correspondante';
 end if;
end $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER CHECK_QTE_COMMANDE_LIVRAISON
BEFORE INSERT ON BON_LIVRAISON FOR EACH ROW
BEGIN
 DECLARE total_QTE FLOAT DEFAULT 0;
 IF ((SELECT SUM(QTE) FROM BON_LIVRAISON WHERE ID_COMMANDE = NEW.ID_COMMANDE) + NEW.QTE) > (SELECT com.QTE FROM BON_COMMANDE com WHERE com.ID_COMMANDE = NEW.ID_COMMANDE) THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La quantité totale livrée dépasse la quantité commandée';
END IF;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER Verif_Facture_Fournisseur
BEFORE INSERT
ON FACTURE
FOR EACH ROW
BEGIN
  IF EXISTS (
    SELECT *
    FROM inserted i
    INNER JOIN BON_LIVRAISON bl ON i.ID_BON_LIV = bl.ID_BON_LIV
    INNER JOIN BON_COMMANDE bc ON i.ID_COMMANDE = bc.ID_COMMANDE
    INNER JOIN FOURNISSEUR f ON i.ID_TIERS = bc.ID_TIERS
    WHERE f.ID_TIERS <> i.ID_TIERS
  ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Le fournisseur ne peut facturer que sa commande';
  END IF;
END $$
       
DELIMITER ;

DELIMITER $$

CREATE TRIGGER Verif_Facture_Fournisseur_INSERT
BEFORE INSERT ON FACTURE
FOR EACH ROW
BEGIN
    DECLARE id_bl INT DEFAULT 0;
    SET id_bl = (SELECT ID_BON_LIV FROM BON_LIVRAISON WHERE ID_FACTURE = NEW.ID_FACTURE);
    
    IF (SELECT con.ID_COMMANDE FROM concerne con WHERE con.ID_BON_LIV = id_bl 
        NOT IN (SELECT ID_COMMANDE FROM COMMANDE WHERE ID_TIERS = NEW.ID_TIERS)) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le fournisseur ne peut facturer que sa commande';
    END IF;
END$$


DELIMITER ;

DELIMITER $$

CREATE TRIGGER Verif_Facture_Fournisseur_UPDATE
BEFORE UPDATE ON FACTURE
FOR EACH ROW
BEGIN
    DECLARE id_bl INT DEFAULT 0;
    SET id_bl = (SELECT ID_BON_LIV FROM BON_LIVRAISON WHERE ID_FACTURE = NEW.ID_FACTURE);
    
    IF (SELECT con.ID_COMMANDE FROM concerne con WHERE con.ID_BON_LIV = id_bl 
        NOT IN (SELECT ID_COMMANDE FROM COMMANDE WHERE ID_TIERS = NEW.ID_TIERS)) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le fournisseur ne peut facturer que sa commande';
    END IF;
END$$


DELIMITER ;

DELIMITER $$

CREATE TRIGGER Verif_Livraison_Fournisseur
BEFORE INSERT ON BON_LIVRAISON
FOR EACH ROW
BEGIN
  DECLARE fournisseur_id INT;
  
  SELECT bc.ID_TIERS INTO fournisseur_id
  FROM BON_COMMANDE bc
  WHERE bc.ID_COMMANDE = NEW.ID_COMMANDE;
  
  IF facture.ID_TIERS <> fournisseur_id THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Le fournisseur ne peut livrer que sa commande';
  END IF;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER HeureTravail_dans_DateContrat
BEFORE INSERT ON HEURE_TRAVAIL FOR EACH ROW
BEGIN
     DECLARE rowcount INT;
     SELECT COUNT(*) INTO rowcount FROM HEURE_TRAVAIL, CONTRAT
     WHERE HEURE_TRAVAIL.ID_TIERS = CONTRAT.ID_TIERS AND HEURE_TRAVAIL.DATE BETWEEN CONTRAT.DATE_DEBUT AND CONTRAT.DATE_FIN;
     IF rowcount > 0 THEN
     SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Date non valide car n''est pas dans le contrat du travailleur';
     END IF;
END$$

DELIMITER ;